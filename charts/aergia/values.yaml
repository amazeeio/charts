image:
  repository: uselagoon/aergia
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""

extraArgs:

serviceAccount:
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set, a name is generated using the fullname template
  name: ""

replicaCount: 1

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 8443

backend:
  service:
    type: ClusterIP
    port: 80

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

# this sidecar runs in the same pod as dbaas-operator
kubeRBACProxy:
  image:
    repository: bitnami/kube-rbac-proxy
    pullPolicy: IfNotPresent
    tag: 0.18.2

  securityContext: {}

  resources: {}

templates:
  enabled: false
  error: |-
    {{define "base"}}
    <html>
    <body>
    {{ .ErrorCode }} {{ .ErrorMessage }}
    </body>
    </html>
    {{end}}
  forced: |-
    {{define "base"}}
    <html>
    <head>
    </head>
    <body>
    {{ .ErrorCode }} {{ .ErrorMessage }}
    </body>
    </html>
    {{end}}
  unidle: |-
    {{define "base"}}
    <html>
    <head>
    <meta http-equiv="refresh" content="{{ .RefreshInterval }}">
    </head>
    <body>
    {{ .ErrorCode }} {{ .ErrorMessage }}
    </body>
    </html>
    {{end}}

idling:
  enabled: false
  dryRun: false
  prometheusEndpoint: "http://monitoring-kube-prometheus-prometheus.monitoring.svc:9090"
  # these two interval checks are golang time.Duration format (https://pkg.go.dev/time#ParseDuration)
  prometheusCheckInterval: "4h"
  podCheckInterval: "4h"
  enableCLIIdler: true
  enableServiceIdler: true
  cliCron: "5,35 * * * *"
  serviceCron: "0 */4 * * *"
  skipHitCheck: false
  # the length of time to display the loading page when unidling a namespace in seconds
  refreshInterval: 30

unidling:
  verifyRequests:
    enabled: false
    secret: super-secret-string
  # if you want or need to block or allow certain ip address or useragents
  # from being able to unidle environments in your cluster
  # you can define the items you want to allow or block here
  # these are applied to all environments unless they have annotation overrides, eg:
  # ipAllowList:
  #   - 1.2.3.4
  # ipBlockList:
  #   - 1.2.3.5
  #   - 4.3.2.1
  # agentAllowList:
  #   - "@(example).com.?$"
  # agentBlockList:
  #   - "@(example).test.?$"
  #   - "@(internal).test.?$"

  # ip addresses to allow or block.
  ipAllowList:
  ipBlockList:
  # user agents to allow or block
  agentAllowList:
  agentBlockList:

customSelectors:
  enabled: false
  # example for defining selectors, see aergia for the full format, you need to provide the full file if you want to change any selectors
  # selectors: |-
  #   cli:
  #     namespace:
  #       - name: "lagoon.sh/environmentType"
  #         operator: "in"
  #         values:
  #           - "production"
  #           - "development"

metrics:
  enabled: true
  interval: 30s

servicemonitor:
  enabled: false
  spec:
    endpoints:
      - interval: 30s
        metricRelabelings:
          - action: drop
            regex: >-
              (nginx_ingress_controller_request_duration_seconds_bucket|nginx_ingress_controller_response_size_bucket|nginx_ingress_controller_request_size_bucket|nginx_ingress_controller_response_duration_seconds_bucket|nginx_ingress_controller_bytes_sent_bucket)
            sourceLabels:
              - __name__
        port: metrics
    namespaceSelector:
      matchNames:
        - ingress-nginx
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
